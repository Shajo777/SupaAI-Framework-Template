name: CI

on:
  pull_request:
    branches: [develop]

# Add permissions needed for the dorny/paths-filter action
permissions:
  contents: read
  pull-requests: read

jobs:
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      database-changed: ${{ steps.filter.outputs.database }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Filter changed files
        uses: dorny/paths-filter@v2
        id: filter
        with:
          # Use base_ref for pull requests to compare against the base branch
          base: ${{ github.base_ref }}
          # Use the GitHub token explicitly
          token: ${{ github.token }}
          filters: |
            database:
              - 'supabase/migrations/**'
              - 'supabase/config.toml'
              - 'supabase/seed.sql'

  lint:
    name: Lint
    runs-on: ubuntu-latest
    environment: develop
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Deno environment
        uses: ./.github/actions/setup-deno
        with:
          cache-key: deno-deps-${{ hashFiles('supabase/functions/deno.lock', 'supabase/import_map.json') }}

      - name: Run linting
        run: cd supabase/functions && deno lint
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    environment: develop
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Deno environment
        uses: ./.github/actions/setup-deno
        with:
          cache-key: deno-deps-${{ hashFiles('supabase/functions/deno.lock', 'supabase/import_map.json') }}

      - name: Run tests
        run: cd supabase/functions && deno task test:unit

  e2e-test:
    name: E2E Tests
    needs: [lint, test, detect-changes]
    runs-on: ubuntu-latest
    environment: develop
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Deno environment
        uses: ./.github/actions/setup-deno
        with:
          cache-key: deno-deps-${{ hashFiles('supabase/functions/deno.lock', 'supabase/import_map.json') }}

      - name: Setup Supabase environment
        uses: ./.github/actions/setup-supabase

      - name: Cache Docker images
        uses: actions/cache@v3
        with:
          path: /var/lib/docker
          # Use a more stable cache key that doesn't change as frequently
          key: ${{ runner.os }}-docker-supabase-v1
          restore-keys: |
            ${{ runner.os }}-docker-supabase-

      # Conditionally start Supabase or reset database based on changes
      - name: Start Supabase (Full Setup)
        if: needs.detect-changes.outputs.database-changed == 'true'
        run: supabase start

      - name: Start Supabase (Database Reset)
        if: needs.detect-changes.outputs.database-changed != 'true'
        run: |
          supabase start
          supabase db reset

      - name: Verify Supabase is running
        run: |
          echo "Checking Supabase REST API..."
          curl -s http://localhost:54321/rest/v1/ -H "apikey: ${{ secrets.SUPABASE_ANON_KEY }}"

          echo "Checking PostgreSQL connection..."
          PGPASSWORD=postgres psql -h localhost -p 54322 -U postgres -c "SELECT version();"

      - name: Capture Supabase Credentials
        run: |
          echo "SUPABASE_URL=$(supabase status | grep 'API URL' | awk '{print $3}')" >> $GITHUB_ENV
          echo "SUPABASE_ANON_KEY=$(supabase status | grep 'anon key' | awk '{print $3}')" >> $GITHUB_ENV
          echo "SUPABASE_SERVICE_ROLE_KEY=$(supabase status | grep 'service_role key' | awk '{print $3}')" >> $GITHUB_ENV

      # Apply migrations incrementally using the script
      - name: Apply migrations
        run: |
          chmod +x .github/scripts/apply-migrations.sh
          ./.github/scripts/apply-migrations.sh

      - name: Generate database types
        run: cd supabase/functions && deno task type:db
        env:
          SUPABASE_URL: ${{ env.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ env.SUPABASE_SERVICE_ROLE_KEY }}

      - name: Run E2E tests
        run: cd supabase/functions && deno task test:e2e
        env:
          SUPABASE_URL: ${{ env.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ env.SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ env.SUPABASE_SERVICE_ROLE_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
